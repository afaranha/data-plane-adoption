- name: Create Certificate Issuer with cert and key from IPA
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    IPA_SSH="{{ ipa_ssh }}"
    $IPA_SSH pk12util -o /tmp/freeipa.p12 -n 'caSigningCert\ cert-pki-ca' -d /etc/pki/pki-tomcat/alias -k /etc/pki/pki-tomcat/alias/pwdfile.txt -w /etc/pki/pki-tomcat/alias/pwdfile.txt
    KEY_LENGTH=`$IPA_SSH openssl pkcs12 -in /tmp/freeipa.p12 -passin file:/etc/pki/pki-tomcat/alias/pwdfile.txt -nocerts -noenc | openssl rsa -text -noout | awk -F'[^0-9]+' '{ print $2; exit }'`

    oc create secret generic rootca-internal

    oc patch secret rootca-internal -n openstack -p="{\"data\":{\"ca.crt\": \"`$IPA_SSH openssl pkcs12 -in /tmp/freeipa.p12 -passin file:/etc/pki/pki-tomcat/alias/pwdfile.txt -nokeys | openssl x509 | base64 -w 0`\"}}"

    oc patch secret rootca-internal -n openstack -p="{\"data\":{\"tls.crt\": \"`$IPA_SSH openssl pkcs12 -in /tmp/freeipa.p12 -passin file:/etc/pki/pki-tomcat/alias/pwdfile.txt -nokeys | openssl x509 | base64 -w 0`\"}}"

    oc patch secret rootca-internal -n openstack -p="{\"data\":{\"tls.key\": \"`$IPA_SSH openssl pkcs12 -in /tmp/freeipa.p12 -passin file:/etc/pki/pki-tomcat/alias/pwdfile.txt -nocerts -noenc | openssl rsa | base64 -w 0`\"}}"

    oc apply -f - <<EOF
    apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      name: rootca-internal
      namespace: openstack
      labels:
        osp-rootca-issuer-public: ""
        osp-rootca-issuer-internal: ""
        osp-rootca-issuer-ovn: ""
    spec:
      ca:
        secretName: rootca-internal
    EOF

- name: Stop certmonger service
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    EDPM_PRIVATEKEY_PATH="{{ edpm_privatekey_path }}"
    declare -A computes
    computes=(
      ["standalone.ooo.test"]="{{ edpm_node_ip }}"
    )
    for i in "${!computes[@]}"; do
        SSH_CMD="ssh -i $EDPM_PRIVATEKEY_PATH root@${computes[$i]}"
        if ${SSH_CMD} sudo systemctl is-active certmonger.service; then
            echo "Stopping certmonger on $i..."
            ${SSH_CMD} sudo systemctl stop certmonger.service
            echo "Disabling certmonger on $i..."
            ${SSH_CMD} sudo systemctl disable --now certmonger.service
            ${SSH_CMD} test -f /etc/systemd/system/certmonger.service '||' sudo systemctl mask certmonger.service
        fi
        # If necessary, adjust the directory below accordingly.
        certs_directory=/var/lib/certmonger/requests
        certs_to_stop=$(${SSH_CMD} ls -1 $certs_directory)
        number_of_certs=$(${SSH_CMD} ls -1 $certs_directory | wc -l)
        if [ $? != 0 ] || [ $number_of_certs = 0 ]; then
            echo "No certificates to stop tracking on $i."
        else
            echo "There is/are $number_of_certs certificates to stop being tracked on $i. Stopping to track certificates..."
        fi
        while IFS= read -r cert; do
            echo "Stopping to track $cert..."
            ${SSH_CMD} rm -f $certs_directory/$cert
        done <<< "$certs_to_stop"
    done
